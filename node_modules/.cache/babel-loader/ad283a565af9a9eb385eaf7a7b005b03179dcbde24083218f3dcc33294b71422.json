{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.SUPRAJA\\\\Documents\\\\Infosys  E-doctor\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Hi! How can I assist you today? Please select an option below.'\n  }]);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  // Predefined Questions and Answers\n  const questionsAndAnswers = {\n    login: [{\n      question: 'How do I log in?',\n      answer: 'Use your registered email and password to log in on the login page.'\n    }, {\n      question: 'What if I forget my password?',\n      answer: 'Click on the \"Forgot Password\" link on the login page and follow the instructions.'\n    }],\n    register: [{\n      question: 'How do I register?',\n      answer: 'To register, visit the registration page and fill in your details.'\n    }, {\n      question: 'What do I need to register?',\n      answer: 'You will need your name, email, phone number, and password to complete registration.'\n    }],\n    appointment: [{\n      question: 'How do I book an appointment?',\n      answer: 'Log in to your account, select a doctor, and book an available slot.'\n    }, {\n      question: 'Can I change my appointment?',\n      answer: 'Yes, you can reschedule your appointment by logging into your account.'\n    }],\n    password: [{\n      question: 'How do I reset my password?',\n      answer: 'Click on the \"Forgot Password\" link on the login page and follow the instructions.'\n    }, {\n      question: 'What should I do if I still can’t reset my password?',\n      answer: 'Contact customer support for further assistance.'\n    }]\n  };\n\n  // Toggle chatbot visibility\n  const toggleChatbot = () => setIsOpen(!isOpen);\n\n  // Handle question selection\n  const handleQuestionClick = qa => {\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: qa.question\n    }, {\n      sender: 'bot',\n      text: qa.answer\n    }]);\n  };\n\n  // Set the selected option (login, register, etc.)\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: `I want to know about ${option}.`\n    }, {\n      sender: 'bot',\n      text: `Here are some questions about ${option}:`\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-trigger\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"open-chatbot-btn\",\n        onClick: toggleChatbot,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chatbot-label\",\n        children: \"Chat with Us\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [\"Chat with Us\", /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: toggleChatbot,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-body\",\n        children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatbot-message ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`,\n          children: msg.text\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-footer\",\n        children: [!selectedOption && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chatbot-option-btn\",\n            onClick: () => handleOptionSelect('login'),\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chatbot-option-btn\",\n            onClick: () => handleOptionSelect('register'),\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chatbot-option-btn\",\n            onClick: () => handleOptionSelect('appointment'),\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chatbot-option-btn\",\n            onClick: () => handleOptionSelect('password'),\n            children: \"Password Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), selectedOption && questionsAndAnswers[selectedOption].map((qa, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-question-btn\",\n          onClick: () => handleQuestionClick(qa),\n          children: qa.question\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Chatbot, \"qp7DjGZPW6nZbFsl6DV0YkgF/gg=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","sender","text","selectedOption","setSelectedOption","questionsAndAnswers","login","question","answer","register","appointment","password","toggleChatbot","handleQuestionClick","qa","prev","handleOptionSelect","option","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","_c","$RefreshReg$"],"sources":["C:/Users/M.SUPRAJA/Documents/Infosys  E-doctor/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nfunction Chatbot() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    { sender: 'bot', text: 'Hi! How can I assist you today? Please select an option below.' },\r\n  ]);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n\r\n  // Predefined Questions and Answers\r\n  const questionsAndAnswers = {\r\n    login: [\r\n      { question: 'How do I log in?', answer: 'Use your registered email and password to log in on the login page.' },\r\n      { question: 'What if I forget my password?', answer: 'Click on the \"Forgot Password\" link on the login page and follow the instructions.' },\r\n    ],\r\n    register: [\r\n      { question: 'How do I register?', answer: 'To register, visit the registration page and fill in your details.' },\r\n      { question: 'What do I need to register?', answer: 'You will need your name, email, phone number, and password to complete registration.' },\r\n    ],\r\n    appointment: [\r\n      { question: 'How do I book an appointment?', answer: 'Log in to your account, select a doctor, and book an available slot.' },\r\n      { question: 'Can I change my appointment?', answer: 'Yes, you can reschedule your appointment by logging into your account.' },\r\n    ],\r\n    password: [\r\n      { question: 'How do I reset my password?', answer: 'Click on the \"Forgot Password\" link on the login page and follow the instructions.' },\r\n      { question: 'What should I do if I still can’t reset my password?', answer: 'Contact customer support for further assistance.' },\r\n    ],\r\n  };\r\n\r\n  // Toggle chatbot visibility\r\n  const toggleChatbot = () => setIsOpen(!isOpen);\r\n\r\n  // Handle question selection\r\n  const handleQuestionClick = (qa) => {\r\n    setMessages((prev) => [\r\n      ...prev,\r\n      { sender: 'user', text: qa.question },\r\n      { sender: 'bot', text: qa.answer },\r\n    ]);\r\n  };\r\n\r\n  // Set the selected option (login, register, etc.)\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n    setMessages((prev) => [\r\n      ...prev,\r\n      { sender: 'user', text: `I want to know about ${option}.` },\r\n      { sender: 'bot', text: `Here are some questions about ${option}:` },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Chatbot Trigger */}\r\n      <div className=\"chatbot-trigger\">\r\n        <button className=\"open-chatbot-btn\" onClick={toggleChatbot}>\r\n          <i className=\"fas fa-comments\"></i>\r\n        </button>\r\n        <p className=\"chatbot-label\">Chat with Us</p>\r\n      </div>\r\n\r\n      {/* Chatbot Container */}\r\n      {isOpen && (\r\n        <div className=\"chatbot-container\">\r\n          <div className=\"chatbot-header\">\r\n            Chat with Us\r\n            <span onClick={toggleChatbot}>X</span>\r\n          </div>\r\n          <div className=\"chatbot-body\">\r\n            {messages.map((msg, i) => (\r\n              <div key={i} className={`chatbot-message ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`}>\r\n                {msg.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"chatbot-footer\">\r\n            {/* Display option buttons */}\r\n            {!selectedOption && (\r\n              <div className=\"options\">\r\n                <button className=\"chatbot-option-btn\" onClick={() => handleOptionSelect('login')}>Login</button>\r\n                <button className=\"chatbot-option-btn\" onClick={() => handleOptionSelect('register')}>Register</button>\r\n                <button className=\"chatbot-option-btn\" onClick={() => handleOptionSelect('appointment')}>Book Appointment</button>\r\n                <button className=\"chatbot-option-btn\" onClick={() => handleOptionSelect('password')}>Password Reset</button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Display relevant questions based on selected option */}\r\n            {selectedOption && questionsAndAnswers[selectedOption].map((qa, i) => (\r\n              <button\r\n                key={i}\r\n                className=\"chatbot-question-btn\"\r\n                onClick={() => handleQuestionClick(qa)}\r\n              >\r\n                {qa.question}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}