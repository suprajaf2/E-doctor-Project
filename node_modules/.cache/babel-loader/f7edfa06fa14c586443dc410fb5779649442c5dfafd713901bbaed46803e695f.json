{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.SUPRAJA\\\\Documents\\\\Infosys  E-doctor\\\\src\\\\components\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState(''); // Email state to store the email entered for password reset\n  const [showForgotPassword, setShowForgotPassword] = useState(false); // State to show/hide forgot password form\n  const navigate = useNavigate();\n  const adminCredentials = {\n    username: 'admin',\n    // Admin username\n    password: 'admin123' // Admin password\n  };\n  const DoctorCrentials = {\n    username: 'doctor',\n    password: 'doctor123'\n  };\n  const PatientCredentials = {\n    username: 'patient',\n    password: 'patient123'\n  };\n  // Handle forgot password logic\n  const handleForgotPassword = () => {\n    if (email) {\n      // Simulating sending a reset email\n      alert(`Password reset link has been sent to ${email}`);\n      setShowForgotPassword(false); // Close the forgot password form\n    } else {\n      alert('Please enter your email address.');\n    }\n  };\n  const handleLogin = e => {\n    e.preventDefault();\n\n    // Check for admin login\n\n    if (username === adminCredentials.username && password === adminCredentials.password) {\n      alert('Admin login successful!');\n      navigate('/dashboard'); // Redirect to the admin dashboard\n      return; // Exit the function here to prevent further checks for other users\n    }\n    if (username === DoctorCrentials.username && password === DoctorCrentials.password) {\n      alert('Doctor login successfull!');\n      navigate('/Doctordashboard');\n      return;\n    }\n    if (username === PatientCredentials.username && password === PatientCredentials.password) {\n      alert('Patient login successfull!');\n      navigate('/PatientDashboard');\n      return;\n    }\n    // Retrieve the stored user data from localStorage for normal users\n    const storedUser = JSON.parse(localStorage.getItem('user'));\n    console.log(\"successfully login:\", storedUser);\n    // Validate the login credentials for normal users\n    if (storedUser && storedUser.username === username && storedUser.password === password) {\n      alert('Login successful!');\n      navigate('/dashboard'); // Redirect to the dashboard\n    } else {\n      alert('Invalid username or password!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"username\",\n        name: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        name: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"New user? \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/register\",\n          children: \"Register here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => setShowForgotPassword(true) // Trigger to show forgot password form\n        ,\n        className: \"forgot-password-button\",\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), showForgotPassword && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forgot-password-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Enter your email to reset password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: email,\n        onChange: e => setEmail(e.target.value) // Update the email state on change\n        ,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleForgotPassword,\n        children: \"Send Reset Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => setShowForgotPassword(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"jfQaB3WBNuxAxyO4duRUeuhwXRw=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","email","setEmail","showForgotPassword","setShowForgotPassword","navigate","adminCredentials","DoctorCrentials","PatientCredentials","handleForgotPassword","alert","handleLogin","e","preventDefault","storedUser","JSON","parse","localStorage","getItem","console","log","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","name","value","onChange","target","required","href","onClick","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/M.SUPRAJA/Documents/Infosys  E-doctor/src/components/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [email, setEmail] = useState(''); // Email state to store the email entered for password reset\r\n  const [showForgotPassword, setShowForgotPassword] = useState(false); // State to show/hide forgot password form\r\n  const navigate = useNavigate();\r\n\r\n  \r\n  const adminCredentials = {\r\n    username: 'admin', // Admin username\r\n    password: 'admin123', // Admin password\r\n  };\r\nconst DoctorCrentials = {\r\n  username: 'doctor',\r\n  password: 'doctor123',\r\n};\r\nconst PatientCredentials = {\r\n  username: 'patient',\r\n  password: 'patient123',\r\n};\r\n  // Handle forgot password logic\r\n  const handleForgotPassword = () => {\r\n    if (email) {\r\n      // Simulating sending a reset email\r\n      alert(`Password reset link has been sent to ${email}`);\r\n      setShowForgotPassword(false); // Close the forgot password form\r\n    } else {\r\n      alert('Please enter your email address.');\r\n    }\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check for admin login\r\n  \r\n    if (username === adminCredentials.username && password === adminCredentials.password) {\r\n      alert('Admin login successful!');\r\n\r\n      navigate('/dashboard');  // Redirect to the admin dashboard\r\n      return; // Exit the function here to prevent further checks for other users\r\n    }\r\n    if(username===DoctorCrentials.username && password ===DoctorCrentials.password){\r\n      alert('Doctor login successfull!');\r\n      navigate('/Doctordashboard');\r\n      return;\r\n    }\r\n    if(username===PatientCredentials.username && password ===PatientCredentials.password){\r\n      alert('Patient login successfull!');\r\n      navigate('/PatientDashboard');\r\n      return;\r\n    }\r\n    // Retrieve the stored user data from localStorage for normal users\r\n    const storedUser = JSON.parse(localStorage.getItem('user'));\r\n    console.log(\"successfully login:\",storedUser);\r\n    // Validate the login credentials for normal users\r\n    if (storedUser && storedUser.username === username && storedUser.password === password) {\r\n      alert('Login successful!');\r\n      navigate('/dashboard');  // Redirect to the dashboard\r\n    } else {\r\n      alert('Invalid username or password!');\r\n    }\r\n\r\n};\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form className=\"login-form\" onSubmit={handleLogin}>\r\n        <h2>Login</h2>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          required\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n        <p>New user? <a href=\"/register\">Register here</a></p>\r\n\r\n        {/* Forgot Password button */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setShowForgotPassword(true)} // Trigger to show forgot password form\r\n          className=\"forgot-password-button\"\r\n        >\r\n          Forgot Password?\r\n        </button>\r\n      </form>\r\n\r\n      {/* Forgot Password Form */}\r\n      {showForgotPassword && (\r\n        <div className=\"forgot-password-form\">\r\n          <h3>Enter your email to reset password</h3>\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)} // Update the email state on change\r\n            required\r\n          />\r\n          <button type=\"button\" onClick={handleForgotPassword}>\r\n            Send Reset Link\r\n          </button>\r\n          <button type=\"button\" onClick={() => setShowForgotPassword(false)}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}