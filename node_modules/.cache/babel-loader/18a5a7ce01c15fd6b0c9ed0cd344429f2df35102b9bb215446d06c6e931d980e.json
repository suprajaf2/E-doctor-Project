{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.SUPRAJA\\\\Documents\\\\Infosys  E-doctor\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Widget, addResponseMessage, toggleWidget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Predefined questions and answers\n  const questions = [{\n    question: 'What are your office hours?',\n    answer: 'Our office is open from 9 AM to 6 PM, Monday to Friday.'\n  }, {\n    question: 'How can I book an appointment?',\n    answer: 'You can book an appointment by visiting our booking page or contacting us via email.'\n  }, {\n    question: 'What services do you provide?',\n    answer: 'We offer a wide range of medical services including consultations, diagnostics, and treatments.'\n  }];\n\n  // Handle sending a question from user\n  const handleNewUserMessage = newMessage => {\n    console.log(`New message incoming: ${newMessage}`);\n    addResponseMessage('Please choose from the options below:');\n    questions.forEach(q => {\n      addResponseMessage(q.question);\n    });\n  };\n\n  // Handle user selection of a question\n  const handleOptionSelection = selectedQuestion => {\n    var _questions$find;\n    const selectedAnswer = (_questions$find = questions.find(q => q.question === selectedQuestion)) === null || _questions$find === void 0 ? void 0 : _questions$find.answer;\n    if (selectedAnswer) {\n      addResponseMessage(selectedAnswer);\n    } else {\n      addResponseMessage('I am sorry, I did not understand that.');\n    }\n  };\n  useEffect(() => {\n    addResponseMessage('Welcome! How can I assist you today?');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Widget, {\n      title: \"Chat with Us\",\n      subtitle: \"We're here to help!\",\n      handleNewUserMessage: handleNewUserMessage,\n      showCloseButton: true,\n      fullScreenMode: false,\n      badge: isOpen ? '1' : '0',\n      onOpen: () => setIsOpen(true),\n      onClose: () => setIsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOptionSelection(q.question),\n          children: q.question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"vl0Rt3/A8evyRPW1OQ1AhRk4UhU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","Widget","addResponseMessage","toggleWidget","jsxDEV","_jsxDEV","Chatbot","_s","isOpen","setIsOpen","questions","question","answer","handleNewUserMessage","newMessage","console","log","forEach","q","handleOptionSelection","selectedQuestion","_questions$find","selectedAnswer","find","children","title","subtitle","showCloseButton","fullScreenMode","badge","onOpen","onClose","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/M.SUPRAJA/Documents/Infosys  E-doctor/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Widget, addResponseMessage, toggleWidget } from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\n\r\nfunction Chatbot() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Predefined questions and answers\r\n  const questions = [\r\n    { question: 'What are your office hours?', answer: 'Our office is open from 9 AM to 6 PM, Monday to Friday.' },\r\n    { question: 'How can I book an appointment?', answer: 'You can book an appointment by visiting our booking page or contacting us via email.' },\r\n    { question: 'What services do you provide?', answer: 'We offer a wide range of medical services including consultations, diagnostics, and treatments.' },\r\n  ];\r\n\r\n  // Handle sending a question from user\r\n  const handleNewUserMessage = (newMessage) => {\r\n    console.log(`New message incoming: ${newMessage}`);\r\n    addResponseMessage('Please choose from the options below:');\r\n    questions.forEach((q) => {\r\n      addResponseMessage(q.question);\r\n    });\r\n  };\r\n\r\n  // Handle user selection of a question\r\n  const handleOptionSelection = (selectedQuestion) => {\r\n    const selectedAnswer = questions.find((q) => q.question === selectedQuestion)?.answer;\r\n    if (selectedAnswer) {\r\n      addResponseMessage(selectedAnswer);\r\n    } else {\r\n      addResponseMessage('I am sorry, I did not understand that.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    addResponseMessage('Welcome! How can I assist you today?');\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Widget\r\n        title=\"Chat with Us\"\r\n        subtitle=\"We're here to help!\"\r\n        handleNewUserMessage={handleNewUserMessage}\r\n        showCloseButton={true}\r\n        fullScreenMode={false}\r\n        badge={isOpen ? '1' : '0'}\r\n        onOpen={() => setIsOpen(true)}\r\n        onClose={() => setIsOpen(false)}\r\n      />\r\n      <div>\r\n        {/* Display predefined options for the user */}\r\n        {isOpen && (\r\n          <div>\r\n            {questions.map((q, index) => (\r\n              <button key={index} onClick={() => handleOptionSelection(q.question)}>\r\n                {q.question}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}