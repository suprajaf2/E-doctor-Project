{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.SUPRAJA\\\\Documents\\\\Infosys  E-doctor\\\\src\\\\components\\\\DoctorDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  const navigate = useNavigate();\n  const [doctorProfile, setDoctorProfile] = useState(null);\n  useEffect(() => {\n    // Check if the user is a doctor\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user || user.userType !== 'Doctor') {\n      // If the user is not a doctor, redirect them to login\n      navigate('/login');\n    } else {\n      setDoctorProfile(user);\n    }\n  }, [navigate]);\n  const handleProfileUpdate = updatedProfile => {\n    // Here you can handle profile update logic, and make an API call to update doctor details\n    setDoctorProfile(updatedProfile);\n    localStorage.setItem('user', JSON.stringify(updatedProfile)); // Store updated profile in localStorage\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Doctor Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), doctorProfile ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Welcome, Dr. \", doctorProfile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", doctorProfile.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Specialty: \", doctorProfile.specialty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleProfileUpdate({\n          ...doctorProfile,\n          name: 'Updated Name'\n        }),\n        children: \"Update Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading your profile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"SskNASqfKdHP4v1J/4sJeUIsPpc=\", false, function () {\n  return [useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","DoctorDashboard","_s","navigate","doctorProfile","setDoctorProfile","user","JSON","parse","localStorage","getItem","userType","handleProfileUpdate","updatedProfile","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","name","email","specialty","onClick","_c","$RefreshReg$"],"sources":["C:/Users/M.SUPRAJA/Documents/Infosys  E-doctor/src/components/DoctorDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction DoctorDashboard() {\r\n  const navigate = useNavigate();\r\n  const [doctorProfile, setDoctorProfile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if the user is a doctor\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (!user || user.userType !== 'Doctor') {\r\n      // If the user is not a doctor, redirect them to login\r\n      navigate('/login');\r\n    } else {\r\n      setDoctorProfile(user);\r\n    }\r\n  }, [navigate]);\r\n\r\n  const handleProfileUpdate = (updatedProfile) => {\r\n    // Here you can handle profile update logic, and make an API call to update doctor details\r\n    setDoctorProfile(updatedProfile);\r\n    localStorage.setItem('user', JSON.stringify(updatedProfile)); // Store updated profile in localStorage\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Doctor Dashboard</h2>\r\n      {doctorProfile ? (\r\n        <div>\r\n          <h3>Welcome, Dr. {doctorProfile.name}</h3>\r\n          <p>Email: {doctorProfile.email}</p>\r\n          <p>Specialty: {doctorProfile.specialty}</p>\r\n          {/* Add profile update logic here */}\r\n          <button onClick={() => handleProfileUpdate({ ...doctorProfile, name: 'Updated Name' })}>\r\n            Update Profile\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <p>Loading your profile...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACK,QAAQ,KAAK,QAAQ,EAAE;MACvC;MACAR,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,MAAM;MACLE,gBAAgB,CAACC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,MAAMS,mBAAmB,GAAIC,cAAc,IAAK;IAC9C;IACAR,gBAAgB,CAACQ,cAAc,CAAC;IAChCJ,YAAY,CAACK,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC;EAED,oBACEb,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBhB,aAAa,gBACZJ,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,GAAI,eAAa,EAACZ,aAAa,CAACiB,IAAI;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1CpB,OAAA;QAAAgB,QAAA,GAAG,SAAO,EAACZ,aAAa,CAACkB,KAAK;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCpB,OAAA;QAAAgB,QAAA,GAAG,aAAW,EAACZ,aAAa,CAACmB,SAAS;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE3CpB,OAAA;QAAQwB,OAAO,EAAEA,CAAA,KAAMZ,mBAAmB,CAAC;UAAE,GAAGR,aAAa;UAAEiB,IAAI,EAAE;QAAe,CAAC,CAAE;QAAAL,QAAA,EAAC;MAExF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,gBAENpB,OAAA;MAAAgB,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClB,EAAA,CAvCQD,eAAe;EAAA,QACLH,WAAW;AAAA;AAAA2B,EAAA,GADrBxB,eAAe;AAyCxB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}